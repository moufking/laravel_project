node {
    withEnv([
                'registry = 154265/laravel',
                'registryCredential = credential-docker',
                'dockerImage =null ',
                'MYSQL_ROOT_PASSWORD=password',
                'MYSQL_DATABASE=thetiptop',
                'MYSQL_USER=thetiptop_user',
                'NAME_SERVER=server-mysql'
             ]) {

                 def remote = [:]
                remote.name = 'groupethe'
                remote.host = 'dsp-archiwebo20-mt-ma-ca-fd.fr'
                remote.user = 'groupethe'
                remote.password = 'projetThipTop20'
                remote.allowAnyHosts = true

                stage('Remote SSH') {
                  sshCommand remote: remote, command: 'ls -al'
                  sshCommand remote: remote, command: 'hostname'
                  sshCommand remote: remote, command: 'cd workflow && whoami && git branch && data=$(git pull); if [[ "$data" == "Déjà à jour." ]] || [[ "$data" == "Already up to date." ]]; then echo "Successful"; else echo "Failed"; fi'
                 }

                    stage('checkout') {
                        deleteDir()
                        checkout scm
                    }

                 stage('Building our image') {
                       sh ' docker ps'
                       sh 'docker -v'


                    dockerImage = docker.build "154265/laravel" + ":$BUILD_NUMBER"

                         container =  docker.image('mysql:5.7').withRun('-e "MYSQL_DATABASE=${MYSQL_DATABASE}" -e "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" -e "MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}" -e "MYSQL_USER=${MYSQL_USER}" --name server-mysql -p 3306:3306 ') { c ->
                            docker.image('mysql:5.7').inside("--link ${c.id}:db") {
                            sh 'while ! mysqladmin ping -hdb --silent; do sleep 1; done'
                         }

                      containerLaravel =  dockerImage.inside("--link ${c.id}:db") {
                        sh 'composer install'
                        sh 'cp .env.example .env'
                        sh 'php artisan key:generate'
                    	sh "sed -i -e 's/DB_DATABASE=laravel/DB_DATABASE=thetiptop/g' .env"
                    	sh "sed -i -e 's/DB_USERNAME=root/DB_USERNAME=thetiptop_user/g' .env"
                    	sh "sed -i -e 's/DB_PASSWORD=/DB_PASSWORD=password/g' .env"
                    	sh "sed -i -e 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/g' .env"
                    	sh "sed -i -e 's/DB_HOST=127.0.0.1/DB_HOST=server-mysql/g' .env"
                    	sh "sed -i -e 's/SIMPLE_USER_ROLE=/SIMPLE_USER_ROLE=simpleUser/g' .env"
                        sh "sed -i -e 's/ADMIN_ROLE=/ADMIN_ROLE=administrator/g' .env"
                        sh "sed -i -e 's/EMPLOYEE_ROLE=/EMPLOYEE_ROLE=employee/g' .env"
                    	sh 'cat .env'
                    	sh 'php artisan key:generate'
                    	sh 'php artisan migrate'
                    	sh 'php artisan db:seed'
                    	//sh 'vendor/bin/phpunit'
                    	//sh 'vendor/bin/phpunit --coverage-html html'
                        }
                        sh "docker ps"
                        sh "docker images"
                        sh 'docker rmi 12870f7a255a -f'
                        sh "docker images"
                     }

                 }


                      stage('Deploy our image') {
                             docker.withRegistry( '', 'credential-docker' ) {
                                 dockerImage.push("${env.BUILD_NUMBER}")

                             }
                      }
                      /*
                      stage('Cleaning up') {
                       sh "docker rmi $registry:$BUILD_NUMBER"
                      }
                      */
            }

     }







